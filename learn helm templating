# The CRASH course on Helm Templating
## Prerequisites
1) Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)
2) Install [Visual Studio Code](https://code.visualstudio.com/)

### [Install Helm](https://helm.sh/docs/intro/install/)
1) Download the binary from https://github.com/helm/helm/releases
2) Unzip the binary to a directory on your system, such as `C:\Helm`
3) Add the local Helm directory to your PATH.

## Launch Docker Desktop and Enable Kubernetes via Settings

## Create a simple starter Helm Chart
1) Create a folder named - `LearnHelm`
2) Open the `LearnHelm` folder in Visual Studio Code
3) Run the follow command in a Visual Studio Code terminal
    ```
    helm create myproject
    ```

## The bare mininum Helm Chart
1) Delete all folders and files EXCEPT the `Chart.yaml` file
    ```
    └── myproject
        ├── Chart.yaml
        ├── charts
        ├── templates
        │   ├── NOTES.txt
        │   ├── _helpers.tpl
        │   ├── deployment.yaml
        │   ├── hpa.yaml
        │   ├── ingress.yaml
        │   ├── service.yaml
        │   ├── serviceaccount.yaml
        │   └── tests
        │       └── test-connection.yaml
        └── values.yaml
    ```
2) Install the Helm Chart by running the follow command in a Visual Studio Code terminal
    ```
    helm install myrelease myproject
    ```
3) Confirm the Helm Chart installation by running the follow command in a Visual Studio Code terminal
    ```
    helm list
    ```
4) Uninstall the Helm Chart by running the follow command in a Visual Studio Code terminal
    ```
    helm uninstall myrelease
    ```

## Helm - Built-in Objects
1) Create a folder named - `templates` at the same level as `Chart.yaml`
2) Create a file named - `configmap.yaml` inside the `templates` folder
3) Add the following content to the file and save
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-configmap
    data:
      theChartName: {{ .Chart.Name }}
      theTemplateName: {{ .Template.Name }}
    ```
4) Install the Helm Chart by running the follow command in a Visual Studio Code terminal
    ```
    helm install myrelease myproject
    ```
5) Use Helm Get Manifest to view the generated Kubernetes resources by running the follow command in a Visual Studio Code terminal
    ```
    helm get manifest myrelease
    ```
6) Install the Helm Chart again by running the follow command in a Visual Studio Code terminal
    ```
    helm install foobar myproject
    ```
7) Use Helm Get Manifest to view the generated Kubernetes resources by running the follow command in a Visual Studio Code terminal
    ```
    helm get manifest foobar
    ```
8) Confirm the Helm Chart installations by running the follow command in a Visual Studio Code terminal
    ```
    helm list
    ```
9) Uninstall the Helm Charts by running the follow command in a Visual Studio Code terminal
    ```
    helm uninstall myrelease
    helm uninstall foobar
    ```

## Helm - Values Files and Locally render templates
1) Create a file named - `values.yaml` at the same level as `Chart.yaml`
2) Add the following content to the file and save
    ```
    msg: "hello world"
    ```
2) Edit the content of `configmap.yaml` and save
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-configmap
    data:
      theChartName: {{ .Chart.Name }}
      theTemplateName: {{ .Template.Name }}
      message: {{ .Values.msg }}
    ```
3) Locally render the templates by running the follow command in a Visual Studio Code terminal
    ```
    helm template myproject
    ```

## Helm - Overriding entries in values.yaml during deployment
1) Locally render the templates by running the follow command in a Visual Studio Code terminal
    ```
    helm template myproject --set msg="test"
    ```
2) Note the value of `message` in the rendered configmap file

## Helm - Template Functions and Pipelines
1) Edit the content of `values.yaml` and save
    ```
    msg: "hello world"
    user:
      name: john smith
      location: usa
    ```
2) Edit the content of `configmap.yaml` and save
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-configmap
    data:
      theChartName: {{ .Chart.Name }}
      theTemplateName: {{ .Template.Name }}
      message: {{ .Values.msg }}
      userName: {{ quote .Values.user.name }}
      userLocation: {{ upper .Values.user.location }}
    ```
3) Locally render the templates by running the follow command in a Visual Studio Code terminal
    ```
    helm template myproject
    ```
4) Note the usage of the quote and upper functions - https://helm.sh/docs/chart_template_guide/function_list/#string-functions
5) One of the powerful features of the template language is its concept of pipelines. Pipelines are an efficient way of getting several things done in sequence.
6) Edit the content of `configmap.yaml` and save
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-configmap
    data:
      theChartName: {{ .Chart.Name }}
      theTemplateName: {{ .Template.Name }}
      message: {{ .Values.msg }}
      userName: {{ quote .Values.user.name }}
      userLocation: {{ .Values.user.location | quote | upper }}
    ```
7) Locally render the templates by running the follow command in a Visual Studio Code terminal
    ```
    helm template myproject
    ```
8) Note the value of userLocation

## Helm - Template Function - default
1) Edit the content of `configmap.yaml` and save
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-configmap
    data:
      theChartName: {{ .Chart.Name }}
      theTemplateName: {{ .Template.Name }}
      message: {{ .Values.msg }}
      userName: {{ quote .Values.user.name }}
      userLocation: {{ .Values.user.location | quote | upper }}
      currency: {{ .Values.currency | default "usd" | upper }}
    ```
2) Locally render the templates by running the follow command in a Visual Studio Code terminal
    ```
    helm template myproject
    ```

## Helm - Template Function - toYaml
1) Edit the content of `values.yaml` and save
    ```
    msg: "hello world"
    user:
      name: john smith
      location: usa
    placesVisited:
      NY:
        NYC: 4
        Buffalo: 1
      TX:
        Dallas: 1
        Houston: 1
    ```
2) Edit the content of `configmap.yaml` and save
    ```
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Release.Name }}-configmap
    data:
      theChartName: {{ .Chart.Name }}
      theTemplateName: {{ .Template.Name }}
      message: {{ .Values.msg }}
      userName: {{ quote .Values.user.name }}
      userLocation: {{ .Values.user.location | quote | upper }}
      currency: {{ .Values.currency | default "usd" | upper }}
      visited: {{ .Values.placesVisited | toYaml | nindent 4 }}
    ```
3) Locally render the templates by running the follow command in a Visual Studio Code terminal
    ```
    helm template myproject
    ```

## Helm - Template Function List - https://helm.sh/docs/chart_template_guide/function_list/















